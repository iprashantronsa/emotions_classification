# -*- coding: utf-8 -*-
"""happy_sad_DL_using_keras_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11EsmDyiP_Ak2OhtA7KgMm-n6M-fRTi1M
"""

!pip install tensorflow

!pip install opencv-python

!pip install matplotlib

from matplotlib import pyplot as plt

!pip install tensorflow-gpu

!pip list

import tensorflow as tf
import os

gpus = tf.config.experimental.list_physical_devices('GPU')
len(gpus)

"""# image classification

removing dodgy images
"""

from google.colab import drive
drive.mount('/content/drive')

import cv2

import imghdr

data_dir = '/content/drive/MyDrive/image classification'

image_extensions = ['png', 'jpg', 'jpeg', 'bmp']

image_extensions[3]

os.listdir(data_dir) #returns folder in directory
os.listdir(os.path.join(data_dir, 'sad')) #returns items in the folder in directory

hap_img = cv2.imread(os.path.join(data_dir, 'happy', '2341-female_smile_math-732x549-thumbnail-732x549.jpg'))
#importing image from directory

hap_img.shape #checking shape of the image

import matplotlib.pyplot as plt

plt.imshow(cv2.cvtColor(hap_img, cv2.COLOR_BGR2RGB))
plt.show()

for image_classification in os.listdir(data_dir):
  for image in os.listdir(os.path.join(data_dir, image_classification)):
    image_path = os.path.join(data_dir, image_classification, image)
    try:
      img = cv2.imread(image_path)
      tip = imghdr.what(image_path)
      if tip not in image_extensions:
        os.remove(image_path)
    except Exception as e:
          print('Error with image {}'.format(image))
          #os.remove(image_path)

#tf.data.Dataset?? for help

import numpy as np

tf.keras.utils.image_dataset_from_directory??
#tf.keras.utils.image_dataset_from_directory('data', batch_size=10, image_size=(256, 256)) to limit batch size

os.getcwd()

data = tf.keras.utils.image_dataset_from_directory('/content/drive/MyDrive/image classification')

data

data_iterator = data.as_numpy_iterator()

data_iterator

batch = data_iterator.next()

#len(batch)
batch[0].shape

#class = 1 is sad
#class = 0 is happy
batch[1]

fig, ax = plt.subplots(ncols=4, figsize=(8, 8))
for idx, img in enumerate(batch[0][:4]):
  ax[idx].imshow(img.astype(int))
  ax[idx].set_title(batch[1][idx])
  ax[idx].axis('off')
plt.show()

"""# Preprocessing

Scale data
"""

# batch[0] is for images
# batch[1] is for labels

# batch[0].max()
scaled = batch [0] / 255
scaled.max()

data = data.map(lambda x, y: (x/255, y)) #scaling images to 0-1

data.as_numpy_iterator().next()[0].max()

"""<h4> Split Data"""

len(data)

train_size = int(0.7 * len(data))
val_size = int(0.2  * len(data))
test_size = len(data) - train_size - val_size

train_size, val_size, test_size

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size + val_size).take(test_size)

len(train), len(val), len(test)

"""# Deep Neural Network

<h4> Build deep learning model
"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

model = Sequential()

model.add(Conv2D(16, (3, 3), 1, activation='relu', input_shape=(256, 256, 3)))
model.add(MaxPooling2D())

model.add(Conv2D(32, (3, 3), 1, activation='relu'))
model.add(MaxPooling2D())

model.add(Conv2D(16, (3, 3), 1, activation='relu'))
model.add(MaxPooling2D())

model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss=tf.losses.BinaryCrossentropy(), metrics=['accuracy'])

model.summary()

"""<h4> Training"""

import datetime
logdir='logs/fit/' + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")

tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
hist = model.fit(train, epochs=15, validation_data=val, callbacks=[tensorboard_callback, early_stopping])

hist

hist.history

fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color='teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

"""# Evaluation"""

from tensorflow.keras.metrics import Precision, Recall, BinaryAccuracy

prcs = Precision()
rec = Recall()
acc = BinaryAccuracy()

len(test)

for batch in test.as_numpy_iterator():
  X, y = batch
  yhat = model.predict(X)
  prcs.update_state(y, yhat)
  rec.update_state(y, yhat)
  acc.update_state(y, yhat)

print(f'Precision: {prcs.result().numpy()}, Recall: {rec.result().numpy()} , Accuracy: {acc.result().numpy()}')

"""<h4> Test"""

img1 = cv2.imread('happy1.jpg')

import cv2
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show()

resize_img = cv2.resize(img, (256, 256))
plt.imshow(cv2.cvtColor(resize_img, cv2.COLOR_BGR2RGB))
plt.show()

np.expand_dims(resize_img, 0).shape

yhat = model.predict(np.expand_dims(resize_img/255, 0))
if yhat > 0.5:
  print(f'sad')
else:
  print(f'happy')
yhat

img2 = cv2.imread('sad2.jpg')
plt.imshow(cv2.cvtColor(img2, cv2.COLOR_BGR2RGB))
resize_img2 = cv2.resize(img2, (256, 256))
plt.imshow(cv2.cvtColor(resize_img, cv2.COLOR_BGR2RGB))
plt.show()

yhat = model.predict(np.expand_dims(resize_img2/255, 0))
if yhat > 0.5:
  print('sad')
else:
  print('happy')
yhat

from tensorflow.keras.models import load_model

model.save(os.path.join(/content/drive/MyDrive/models, 'emotionsmodel.h5'))